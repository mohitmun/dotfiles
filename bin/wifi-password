#!/usr/bin/env sh

version="0.0.2"

# Shows the usage
function usage() {
  cat << EOS
  Usage: ${YELLOW}wifi-password${NORMAL} ${DarkGray}[options]${NORMAL}
  Options:
    ${YELLOW}-i${NORMAL}      ${DarkGray}SSID of the network you want to get the password${NORMAL}
    ${YELLOW}-h${NORMAL}      ${DarkGray}Display help${NORMAL}
    ${YELLOW}-v${NORMAL}      ${DarkGray}Display version${NORMAL}
  Examples:
    ${YELLOW}wifi-password${NORMAL} -i foo-network
EOS
}

# Sets up the colored output
function colored() {
  RED=$(tput setaf 1)
  GREEN=$(tput setaf 2)
  YELLOW=$(tput setaf 3)
  BLUE=$(tput setaf 4)
  DarkGray=$(tput setaf 8)
  BOLD=$(tput bold)
  UNDERLINE=$(tput smul)
  NORMAL=$(tput sgr0)
}

# Sets up the uncolored output
function uncolored() {
  RED=""
  GREEN=""
  YELLOW=""
  BLUE=""
  DarkGray=""
  BOLD=""
  UNDERLINE=""
  NORMAL=""
}

# Use colors, but only if connected to a terminal, and that terminal supports them.
if [[ -t 1 ]] && [[ -n "$TERM" ]] && which tput &>/dev/null && tput colors &>/dev/null; then
  ncolors=$(tput colors)
  if [[ -n "$ncolors" ]] && [[ "$ncolors" -ge 8 ]] ; then
    colored
  else
    uncolored
  fi
else
  uncolored
fi

# Main script
if [[ $# -eq 0 ]]; then
  usage
  exit 0
fi

while getopts "hvi:" opt; do
  case ${opt} in
    h | i | v)
      declare "option_${opt}=${OPTARG:-0}"
    ;;
    \?)
      echo >&2 "Use 'wifi-password -h' to see usage info"
      exit 1
    ;;
  esac
done

shift $((OPTIND - 1))

# If number of arguments is 0 then exit
if [[ $# -gt 0 ]]; then
  echo >&2 "Invalid arguments: $@"
  echo >&2 "Use 'wifi-password -h' to see usage info"
  exit 1
fi

# Main script
if [[ ${option_h} ]]; then
  usage
  exit 0
fi

# Show version of the script
if [[ ${option_v} ]]; then
  echo "wifi-password version ${version}"
  exit 0
fi

# Get wifi password
if [[ -n ${option_i} ]]; then
  case "`uname -s`" in
    Darwin)
      cmdOutput="`security find-generic-password -D 'AirPort network password' -a "${option_i}" -g 2>&1 > /dev/null`"
      # exit if ssid not found
      if [[ ${cmdOutput} =~ "could" ]]; then
        echo >&2 "\n${RED}ERROR:${NORMAL} Could not find SSID \"${option_i}\""
        exit 1
      fi
      # Extract password from string
      wifiPassword=$(echo ${cmdOutput} | cut -d'"' -f 2)
      echo ${wifiPassword}
    ;;
    Linux)
      cmdOutput="`cat /etc/NetworkManager/system-connections/"${option_i}" 2>&1 > /dev/null`"
      wifiPassword=$(echo ${cmdOutput} | sed -n 's/psk=\(.*\)/\1/p')
      echo ${wifiPassword}
    ;;
    CYGWIN* | MINGW* | MSYS*)
      cmdOutput="`netsh wlan show profiles name="${option_i}" key=clear`"
      wifiPassword=$(echo ${cmdOutput} | sed -n 's/\(.*Key Content.*\) : \(.*\)/\2/p')
      echo ${wifiPassword}
    ;;
    *)
      echo >&2 "\n${RED}Error:${NORMAL} Operating system is unknown"
      exit 1
    ;;
  esac
fi
